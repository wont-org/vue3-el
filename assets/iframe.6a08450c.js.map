{"version":3,"file":"iframe.6a08450c.js","sources":["../../vite/modulepreload-polyfill","../../.storybook/preview.ts","../../stories/assets/code-brackets.svg","../../stories/assets/colors.svg","../../stories/assets/comments.svg","../../stories/assets/direction.svg","../../stories/assets/flow.svg","../../stories/assets/plugin.svg","../../stories/assets/repo.svg","../../stories/assets/stackalt.svg","../../components/Button/index.tsx","../../components/WidgetForm/utils.ts","../../components/WidgetForm/ProxyOption.tsx","../../components/_common/constant.ts","../../components/WidgetForm/index.tsx","../../components/WidgetForm/demos/allDemo.tsx","../../components/WidgetForm/demos/formDemo.tsx","../../../../../../../virtual:/@storybook/builder-vite/vite-app.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { Parameters } from '@storybook/addons'\n\nexport const parameters: Parameters = {\n    // actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n        matchers: {\n            color: /(background|color)$/i,\n            date: /Date$/,\n        },\n    },\n    backgrounds: {\n        default: 'white',\n        values: [\n            {\n                name: 'white',\n                value: '#f4f4f4',\n            },\n            {\n                name: 'black',\n                value: '#333',\n            },\n        ],\n    },\n}\n","export default \"__VITE_ASSET__9ef6443e__\"","export default \"__VITE_ASSET__ac9401f3__\"","export default \"__VITE_ASSET__f15a6837__\"","export default \"__VITE_ASSET__94a9917f__\"","export default \"__VITE_ASSET__275142c6__\"","export default \"__VITE_ASSET__57148314__\"","export default \"__VITE_ASSET__fb4ece47__\"","export default \"__VITE_ASSET__2ad81543__\"","import {\n    defineComponent, PropType \n} from 'vue'\nimport { Button } from 'ant-design-vue'\nimport buttonProps from 'ant-design-vue/es/button/buttonTypes'\nimport './index.less'\n\nexport const antdBtnType = [\n    'default',\n    'link',\n    'text',\n    'dashed',\n    'ghost',\n    'primary',\n] as const\nexport const btnType = ['success', 'info', 'warning'] as const\nexport type BtnType = typeof btnType[number] | typeof antdBtnType[number]\n// export interface ExtraButtonProps extends Omit<ButtonProps, 'type'> {\n//     type: BtnType | ButtonProps['type']\n// }\n\nconst antdBtnProps = buttonProps()\nexport default defineComponent({\n    name: 'Button',\n    props: {\n        ...antdBtnProps,\n        btnType: {\n            type: String as PropType<BtnType>,\n            default: '',\n        },\n    },\n    setup(props, { slots }) {\n        const type = props.btnType || props.type\n        return () => {\n            const btnTypeCls = type ? `ant-btn-${type}` : ''\n            return (\n                <section class=\"ant-btn-wrap\">\n                    <Button class={`${btnTypeCls}`} {...props}>\n                        {typeof slots.default === 'function' && slots.default()}\n                    </Button>\n                </section>\n            )\n        }\n    },\n})\n","import {\n    OptionItem, FieldNames, Cate \n} from './interface'\n\nexport const formatOptions = (\n    opt: OptionItem[],\n    fieldNames: FieldNames\n): FieldNames[] => {\n    return opt.map((item) => ({\n        value: item[fieldNames.value] || '',\n        label: item[fieldNames.label],\n    }))\n}\n\nexport const getCateFullPath = (\n    originArr: Cate[],\n    v: string | number\n): any[] => {\n    if (!v) {return []}\n    const pathArr: number[] = []\n    let needBreak = false\n    const getPathArr = (arr: any[]) => {\n        for (let i = 0; i < arr.length; i += 1) {\n            if (needBreak) {break}\n            pathArr[arr[i].level - 1] = arr[i].categoryId\n            if (arr[i].categoryId === v) {\n                needBreak = true\n                break\n            } else if (arr[i].childs) {\n                getPathArr(arr[i].childs || [])\n            }\n        }\n    }\n    getPathArr(originArr)\n    return needBreak ? pathArr : []\n}\n","import {\n    defineComponent, onBeforeMount, reactive, watch, PropType \n} from 'vue'\nimport { isEqual } from 'lodash'\nimport { formatOptions } from './utils'\nimport { FieldNames } from './interface'\n\nexport default defineComponent({\n    name: 'ProxyOption',\n    props: {\n        options: {\n            type: [Array, Function],\n            default: () => [],\n            // required: true,\n        },\n        deps: {\n            type: Array,\n            default: () => [],\n        },\n        type: {\n            type: String,\n            default: '',\n        },\n        fieldNames: {\n            type: Object as PropType<FieldNames>,\n            default: () => ({\n                value: 'value',\n                label: 'label',\n            }),\n        },\n    },\n    setup(props, { slots }) {\n        // console.log('props :>> ', props);\n        const modelRef = reactive({\n            options: [],\n        })\n\n        const updateOptions = async () => {\n            let optionsList = []\n            if (typeof props.options === 'function') {\n                optionsList = (await props.options()) || []\n            } else {\n                optionsList = props.options || []\n            }\n            if (\n                props.type !== 'cascader' &&\n                props.fieldNames &&\n                Array.isArray(optionsList) &&\n                optionsList.length > 0\n            ) {\n                optionsList = formatOptions(optionsList, props.fieldNames)\n            }\n            modelRef.options = optionsList\n            // console.log('modelRef.options :>> ', modelRef.options)\n        }\n\n        watch(\n            () => [props.deps, props.options],\n            async ([curDeps, curOpt], [preDeps, preOpt]) => {\n                if (!isEqual(curDeps, preDeps)) {\n                    console.log('deps update')\n                    await updateOptions()\n                } else if (!isEqual(curOpt, preOpt)) {\n                    console.log('opt update')\n                    await updateOptions()\n                }\n            }\n        )\n\n        onBeforeMount(async () => {\n            await updateOptions()\n        })\n\n        return () => {\n            return (\n                <div>\n                    {typeof slots.default === 'function'\n                        ? slots.default(modelRef.options)\n                        : null}\n                </div>\n            )\n        }\n    },\n})\n","export const IMG = {\n    default:\n        'https://cdn.wanwudezhi.com/static/web-static/image/ce92ce805877c85b39f826adb7f37738_194x195.png',\n}\n// antd default\nexport const FORMAT_DATE = {\n    date: 'YYYY-MM-DD',\n    time: 'HH:mm:ss',\n    datetime: 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport const REG_EXP = {\n    url: /^(((ht|f)tps?):\\/\\/)?[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?$/,\n}\n","import moment from 'moment'\nimport { createClasses } from 'vue3-emotion'\nimport {\n    defineComponent, reactive, ref, onMounted, watch, toRaw \n} from 'vue'\nimport type { PropType } from 'vue'\nimport {\n    Form,\n    Input,\n    InputNumber,\n    Select,\n    Cascader,\n    DatePicker,\n    Row,\n    Radio,\n    Checkbox,\n    Switch,\n} from 'ant-design-vue'\nimport type {\n    RangePickerPresetRange,\n    RangePickerValue,\n} from 'ant-design-vue/es/date-picker/interface'\nimport type { FormProps } from 'ant-design-vue/es/form/Form'\nimport {\n    get, isEqual \n} from 'lodash'\nimport type {\n    TimeConfig,\n    DataSourceItem,\n    OptionItem,\n    Cate,\n    BtnConfigItem,\n    WatchInitModel,\n} from './interface'\nimport ProxyOption from './ProxyOption'\nimport { FORMAT_DATE } from '../_common/constant'\nimport { getCateFullPath } from './utils'\nimport Button from '../Button'\n\ninterface StateRef {\n    modelRef: Record<string, any>\n    rulesRef: Record<string, any>\n}\n\nexport interface WidgetFormProps {\n    dataSource: DataSourceItem[]\n    config?: FormProps\n    watchInitModel?: WatchInitModel\n    onInitModel?: (state: Record<string, unknown>) => void\n    onChange?: (state: Record<string, unknown>) => void\n}\n\nconst WidgetForm = defineComponent({\n    name: 'WidgetForm',\n    props: {\n        dataSource: {\n            type: Array as PropType<WidgetFormProps['dataSource']>,\n            required: true,\n        },\n        // 参照antd，model和rules自动生成，不需要传\n        config: {\n            type: Object as PropType<WidgetFormProps['config']>,\n            default: () => ({}),\n        },\n        /**\n         * dataSource变化时，触发onInitModel方法。\n         * 慎用！如onInitModel方法中有副作用，则会导致递归。\n         * 一般情况，onInitModel与 watchInitModel 不共存\n         * @desc 表单场景，编辑带入初值时 updateState: true\n         * @property updateState 更新初始值\n         * @property emitInitModel 触发onInitModel\n         */\n        watchInitModel: {\n            type: Object as PropType<WidgetFormProps['watchInitModel']>,\n            default: () => ({\n                updateState: false,\n                emitInitModel: false,\n            }),\n        },\n        onInitModel: {\n            type: Function as PropType<WidgetFormProps['onInitModel']>,\n            default: () => {},\n        },\n        onChange: {\n            type: Function as PropType<WidgetFormProps['onChange']>,\n            default: () => {},\n        },\n    },\n    emits: ['update:value'] as string[],\n    setup(props, { emit, expose }) {\n        const stateRef: StateRef = reactive({\n            modelRef: {},\n            rulesRef: {},\n        })\n        // console.log('props.onChange :>> ', props.onChange)\n        // console.log('props :>> ', props);\n        // set style\n        const classRef = createClasses(() => ({\n            rootCls: {\n                '.ant-form-item-reset': {\n                    marginBottom: '10px',\n                },\n                '.select-reset': {\n                    minWidth: '160px',\n                },\n                '.input-reset': {\n                    minWidth: '140px',\n                    width: 'auto',\n                },\n                '.sep': {\n                    width: '20px',\n                    textAlign: 'center',\n                    display: 'inline-block',\n                },\n                '.mr20': {\n                    marginRight: '20px',\n                },\n                '.mr30': {\n                    marginRight: '30px',\n                },\n            },\n        }))\n        const formRef = ref()\n\n        const getRawModel = () => {\n            const rawModel: Record<string, any> = {}\n            const rawRules: Record<string, any> = {}\n            props.dataSource.forEach((item) => {\n                const { name, value, type, rules = [], isHidden } = item\n                if (name && !isHidden) {\n                    rawRules[name] = rules\n                    if (Array.isArray(value)) {\n                        if (type === 'rangePicker') {\n                            const timeConfig: TimeConfig = {\n                                momentDate: [],\n                                dateString: [],\n                                second: [],\n                                msec: [],\n                                daySecond: [],\n                            }\n                            value.forEach((dateVal: string | number) => {\n                                const date = new Date(dateVal)\n                                const msec = date.getTime()\n                                const sec = Math.floor(msec / 1000)\n                                const daySec = +moment(msec)\n                                    .startOf('day')\n                                    .format('X')\n\n                                timeConfig.momentDate.push(\n                                    moment(date, FORMAT_DATE.datetime)\n                                )\n                                timeConfig.dateString.push(\n                                    moment(date, FORMAT_DATE.datetime).format(\n                                        FORMAT_DATE.datetime\n                                    )\n                                )\n                                timeConfig.second.push(sec)\n                                timeConfig.msec.push(msec)\n                                timeConfig.daySecond.push(daySec)\n                            })\n                            rawModel[name] = timeConfig\n                        } else {\n                            // 处理rangeInput 重置问题\n                            rawModel[name] = [...value]\n                        }\n                    } else {\n                        rawModel[name] = value\n                    }\n                }\n            })\n            // console.log('rawModel :>> ', rawModel);\n            return {\n                rawModel,\n                rawRules,\n            }\n        }\n\n        const initModelRef = () => {\n            const { rawModel, rawRules } = getRawModel()\n            Object.keys(rawModel).forEach((key) => {\n                stateRef.modelRef[key] = rawModel[key]\n                stateRef.rulesRef[key] = rawRules[key]\n            })\n        }\n        // ref共享方法\n        expose({\n            initModelRef,\n            validate: (payload?: string | string[]) => {\n                return formRef.value.validate(payload)\n            },\n            validateFields: (payload?: string | string[]) => {\n                return formRef.value.validateFields(payload)\n            },\n            clearValidate: (payload?: string | string[]) => {\n                formRef.value.clearValidate(payload)\n            },\n        })\n\n        const formItem = (item: Record<string, any>) => {\n            const {\n                name = '',\n                eventName = '',\n                compProps = {},\n                selfProps = {},\n                customRender: CustomRender,\n            } = item\n            const { type, fieldNames, deps = {}, options } = selfProps\n\n            const getDeps = () => {\n                const rawDepVal: string[] = []\n                const { options: depOpt = [] } = deps\n                depOpt.forEach((depKey: string) => {\n                    if (stateRef.modelRef[depKey]) {\n                        rawDepVal.push(stateRef.modelRef[depKey])\n                    }\n                })\n                return rawDepVal\n            }\n            // v-model所需\n            const onChange = (customEmit?: boolean) => {\n                if (!customEmit) {\n                    // console.log('customEmit :>> ', customEmit)\n                    eventName && emit(eventName, stateRef.modelRef)\n                }\n                props.onChange(toRaw(stateRef.modelRef))\n                emit('update:value', stateRef.modelRef)\n            }\n\n            const onRangePickerChange = (\n                modelName: string,\n                momentDate: RangePickerPresetRange,\n                dateStr: string[]\n            ) => {\n                const dateString: string[] = []\n                const second: number[] = []\n                const msec: number[] = []\n                const daySecond: number[] = []\n                const momentDateObj =\n                    typeof momentDate === 'function' ? momentDate() : momentDate\n                momentDateObj.forEach((date: RangePickerValue[number], idx) => {\n                    if (typeof date === 'string') {\n                        date = moment(date, FORMAT_DATE.datetime)\n                    }\n                    // hack for moment date\n                    const str = dateStr[idx]\n                    date = moment(str, FORMAT_DATE.datetime)\n\n                    const ms = +date.format('x')\n                    const s = Math.floor(+date.format('X'))\n                    const daySec = +date.startOf('day').format('X')\n                    second.push(s)\n                    msec.push(ms)\n                    daySecond.push(daySec)\n                    dateString.push(str)\n                })\n                stateRef.modelRef[modelName] = {\n                    momentDate: momentDateObj,\n                    dateString,\n                    second,\n                    msec,\n                    daySecond,\n                }\n                // console.log(`${modelName} change`, stateRef.modelRef[modelName])\n                onChange()\n            }\n\n            const onCustomChange = (val: unknown[]) => {\n                // console.log('onCustomChange :>> ', val);\n                stateRef.modelRef[name] = val\n                onChange()\n            }\n\n            switch (item.type) {\n            case 'customRender':\n                return (\n                    CustomRender && (\n                        <CustomRender\n                            allowClear\n                            {...compProps}\n                            onChange={onCustomChange}\n                            value={stateRef.modelRef[name]}\n                        />\n                    )\n                )\n            case 'input':\n                return (\n                    <section>\n                        {type === 'number' ? (\n                            <InputNumber\n                                class=\"input-reset\"\n                                precision={0}\n                                min={0}\n                                onChange={() => {\n                                    onChange(false)\n                                }}\n                                {...compProps}\n                                v-model={[stateRef.modelRef[name], 'value']}\n                            />\n                        ) : (\n                            <Input\n                                class=\"input-reset\"\n                                allowClear\n                                onChange={() => {\n                                    onChange(false)\n                                }}\n                                {...compProps}\n                                v-model={[stateRef.modelRef[name], 'value']}\n                            />\n                        )}\n                    </section>\n                )\n            case 'switch':\n                return (\n                    <Switch\n                        onClick={() => {\n                            onChange(false)\n                        }}\n                        {...compProps}\n                        v-model={[stateRef.modelRef[name], 'checked']}\n                    />\n                )\n            case 'checkbox':\n                return (\n                    <ProxyOption\n                        options={options}\n                        type={item.type}\n                        deps={getDeps()}\n                        fieldNames={fieldNames}\n                    >\n                        {{\n                            default: (optionList: OptionItem[]) => {\n                                return (\n                                    <Checkbox.Group\n                                        onChange={(val = []) => {\n                                            if (eventName) {\n                                                const rawData = optionList.filter(\n                                                    (\n                                                        checked: OptionItem\n                                                    ) => {\n                                                        return val.includes(\n                                                            checked.value\n                                                        )\n                                                    }\n                                                )\n                                                emit(\n                                                    eventName,\n                                                    rawData,\n                                                    val,\n                                                    stateRef.modelRef\n                                                )\n                                                onChange(true)\n                                            }\n                                        }}\n                                        {...compProps}\n                                        options={optionList}\n                                        v-model={[\n                                            stateRef.modelRef[name],\n                                            'value',\n                                            'trim',\n                                        ]}\n                                    />\n                                )\n                            },\n                        }}\n                    </ProxyOption>\n                )\n            case 'radio':\n                return (\n                    <ProxyOption\n                        options={options}\n                        type={item.type}\n                        deps={getDeps()}\n                        fieldNames={fieldNames}\n                    >\n                        {{\n                            default: (optionList: OptionItem[]) => {\n                                return (\n                                    <Radio.Group\n                                        onChange={(e: Event) => {\n                                            if (eventName) {\n                                                const val = get(\n                                                    e,\n                                                    'target.value',\n                                                    ''\n                                                )\n                                                const rawData = optionList.filter(\n                                                    (\n                                                        checked: OptionItem\n                                                    ) => {\n                                                        return (\n                                                            val ===\n                                                                checked.value\n                                                        )\n                                                    }\n                                                )\n                                                emit(\n                                                    eventName,\n                                                    val,\n                                                    rawData,\n                                                    stateRef.modelRef\n                                                )\n                                                onChange(true)\n                                            }\n                                        }}\n                                        {...compProps}\n                                        v-model={[\n                                            stateRef.modelRef[name],\n                                            'value',\n                                        ]}\n                                    >\n                                        {optionList.map(\n                                            ({\n                                                value,\n                                                label,\n                                            }: OptionItem) => (\n                                                <span key={value}>\n                                                    {type === 'button' && (\n                                                        <Radio.Button\n                                                            value={value}\n                                                        >\n                                                            {label}\n                                                        </Radio.Button>\n                                                    )}\n                                                    {type === 'radio' && (\n                                                        <Radio\n                                                            value={value}\n                                                        >\n                                                            {label}\n                                                        </Radio>\n                                                    )}\n                                                </span>\n                                            )\n                                        )}\n                                    </Radio.Group>\n                                )\n                            },\n                        }}\n                    </ProxyOption>\n                )\n            case 'btnGroup':\n                return (options || []).map(\n                    ({\n                        compProps: btnCompProps = {},\n                        eventName: btnEvtName = '',\n                        label = '',\n                    }: BtnConfigItem) => {\n                            // setEmits(btnEvtName)\n                        return (\n                            <Button\n                                class=\"mr20\"\n                                key={label}\n                                {...btnCompProps}\n                                onClick={() => {\n                                    btnEvtName &&\n                                            emit(btnEvtName, stateRef.modelRef)\n                                    console.log(\n                                        'stateRef.modelRef :>> ',\n                                        stateRef.modelRef\n                                    )\n                                }}\n                            >\n                                {label}\n                            </Button>\n                        )\n                    }\n                )\n            case 'cascader':\n                return (\n                    <ProxyOption\n                        options={options}\n                        type={item.type}\n                        deps={getDeps()}\n                    >\n                        {{\n                            default: (optionList: Cate[]) => {\n                                const len = get(\n                                    stateRef,\n                                    `modelRef[${name}].length`\n                                )\n                                if (len === 1) {\n                                    const secCate = get(\n                                        stateRef.modelRef,\n                                        `${name}[0]`\n                                    )\n                                    const arr = getCateFullPath(\n                                        optionList,\n                                        secCate\n                                    )\n                                    if (arr.length > 0) {\n                                        stateRef.modelRef[name] = arr\n                                    }\n                                }\n                                return (\n                                    <Cascader\n                                        onChange={() => {\n                                            onChange(false)\n                                        }}\n                                        {...compProps}\n                                        options={optionList}\n                                        v-model={[\n                                            stateRef.modelRef[name],\n                                            'value',\n                                        ]}\n                                    />\n                                )\n                            },\n                        }}\n                    </ProxyOption>\n                )\n            case 'select':\n                return (\n                    <ProxyOption\n                        options={options}\n                        type={item.type}\n                        deps={getDeps()}\n                        fieldNames={fieldNames}\n                    >\n                        {{\n                            default: (optionList: OptionItem[]) => (\n                                <Select\n                                    class=\"select-reset\"\n                                    onChange={() => {\n                                        onChange(false)\n                                    }}\n                                    allowClear\n                                    {...compProps}\n                                    v-model={[\n                                        stateRef.modelRef[name],\n                                        'value',\n                                    ]}\n                                >\n                                    {optionList.map(({ value, label }) => (\n                                        <Select.Option\n                                            key={value}\n                                            value={value}\n                                        >\n                                            {label}\n                                        </Select.Option>\n                                    ))}\n                                </Select>\n                            ),\n                        }}\n                    </ProxyOption>\n                )\n            case 'rangePicker': {\n                const momentDate = get(\n                    stateRef,\n                    `modelRef.${name}.momentDate`\n                )\n                return (\n                    momentDate && (\n                        <DatePicker.RangePicker\n                            showTime={{\n                                defaultValue: [\n                                    moment('00:00:00', FORMAT_DATE.time),\n                                    moment('23:59:59', FORMAT_DATE.time),\n                                ],\n                            }}\n                            format={FORMAT_DATE.datetime}\n                            style={{ width: '380px' }}\n                            {...compProps}\n                            value={stateRef.modelRef[name].momentDate}\n                            onChange={(momentDateObj, dateString) => {\n                                onRangePickerChange(\n                                    name,\n                                    momentDateObj,\n                                    dateString\n                                )\n                            }}\n                        />\n                    )\n                )\n            }\n            case 'rangeInput': {\n                const [minProps = {}, maxProps = {}] = compProps\n                if (!Array.isArray(stateRef.modelRef[name])) {\n                    return null\n                }\n                return (\n                    <section>\n                        {type === 'input' && (\n                            <Input\n                                class=\"input-reset\"\n                                allowClear\n                                onChange={() => {\n                                    onChange(false)\n                                }}\n                                {...minProps}\n                                v-model={[\n                                    stateRef.modelRef[name][0],\n                                    'value',\n                                ]}\n                            />\n                        )}\n                        {type === 'number' && (\n                            <InputNumber\n                                class=\"input-reset\"\n                                precision={0}\n                                min={0}\n                                onChange={() => {\n                                    onChange(false)\n                                }}\n                                {...minProps}\n                                v-model={[\n                                    stateRef.modelRef[name][0],\n                                    'value',\n                                ]}\n                            />\n                        )}\n                        <span class=\"sep\">~</span>\n                        {type === 'input' && (\n                            <Input\n                                class=\"input-reset\"\n                                allowClear\n                                onChange={() => {\n                                    onChange(false)\n                                }}\n                                {...maxProps}\n                                v-model={[\n                                    stateRef.modelRef[name][1],\n                                    'value',\n                                ]}\n                            />\n                        )}\n                        {type === 'number' && (\n                            <InputNumber\n                                class=\"input-reset\"\n                                precision={0}\n                                min={0}\n                                onChange={() => {\n                                    onChange(false)\n                                }}\n                                {...maxProps}\n                                v-model={[\n                                    stateRef.modelRef[name][1],\n                                    'value',\n                                ]}\n                            />\n                        )}\n                    </section>\n                )\n            }\n            default:\n                return null\n            }\n        }\n\n        const initData = (emitInitModel = false) => {\n            const { rawModel } = getRawModel()\n            if (props.watchInitModel.updateState) {\n                initModelRef()\n                console.log('initModelRef')\n            }\n            if (emitInitModel || props.watchInitModel.emitInitModel) {\n                props.onInitModel(rawModel)\n                console.log('onInitModel')\n            }\n        }\n\n        watch(\n            () => props.dataSource,\n            (curDataSource, preDataSource) => {\n                if (!isEqual(curDataSource, preDataSource)) {\n                    initData()\n                }\n            }\n        )\n\n        onMounted(() => {\n            initModelRef()\n            initData(true)\n        })\n\n        const { rootCls } = classRef.value\n        return () => (\n            <Form\n                layout=\"inline\"\n                class={rootCls}\n                {...props.config}\n                model={stateRef.modelRef}\n                rules={stateRef.rulesRef}\n                ref={formRef}\n            >\n                {props.dataSource.map((item) => {\n                    const {\n                        formItemLabel,\n                        name = '',\n                        isHidden,\n                        extraRender = {},\n                        formItemProps = {},\n                    } = item\n                    return (\n                        !isHidden && (\n                            <Form.Item\n                                class=\"ant-form-item-reset mr30\"\n                                key={`${formItemLabel}`}\n                                name={name}\n                                label={formItemLabel}\n                                {...formItemProps}\n                            >\n                                {formItem(item)}\n                                <Row>\n                                    {extraRender.tips && <extraRender.tips />}\n                                </Row>\n                            </Form.Item>\n                        )\n                    )\n                })}\n            </Form>\n        )\n    },\n})\n\nexport default WidgetForm\n\nexport * from './interface'\n","import { DataSourceItem } from '../interface'\n\nexport const selectList = [\n    {\n        label: '玩物平台',\n        value: '1',\n    },\n    {\n        label: '212',\n        value: '2',\n    },\n]\n\nexport const cascaderList = [\n    {\n        label: '一级类目-1',\n        value: '1-1',\n        level: 1,\n        children: [\n            {\n                label: '二级类目-1',\n                value: '2-1',\n                level: 2,\n                children: [\n                    {\n                        label: '三级类目-1',\n                        value: '3-1',\n                        level: 3,\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        label: '一级类目-2',\n        value: '1-2',\n        level: 1,\n        children: [\n            {\n                label: '二级类目-2',\n                value: '2-2',\n                level: 2,\n            },\n        ],\n    },\n]\n\nexport const btnConfig = [\n    {\n        label: 'link',\n        eventName: 'reset',\n        // antd 组件属性\n        compProps: {\n            type: 'link',\n        },\n    },\n    {\n        label: 'default',\n        eventName: 'reset',\n        // antd 组件属性\n        compProps: {\n            type: 'default',\n        },\n    },\n    {\n        label: 'primary',\n        eventName: 'query',\n        // antd 组件属性\n        compProps: {\n            type: 'primary',\n        },\n    },\n    {\n        label: 'danger',\n        eventName: 'submit',\n        // antd 组件属性\n        compProps: {\n            danger: true,\n        },\n    },\n    {\n        label: 'success',\n        eventName: 'submit',\n        // antd 组件属性\n        compProps: {\n            btnType: 'success',\n        },\n    },\n    {\n        label: 'info',\n        eventName: 'submit',\n        // antd 组件属性\n        compProps: {\n            btnType: 'info',\n        },\n    },\n    {\n        label: 'warning',\n        eventName: 'submit',\n        // antd 组件属性\n        compProps: {\n            btnType: 'warning',\n        },\n    },\n]\n\nexport const radioConfig = [\n    {\n        label: '昨日数据',\n        value: 1,\n    },\n    {\n        label: '7日数据',\n        value: 2,\n    },\n    {\n        label: '30日数据',\n        value: 3,\n    },\n]\n\nexport const mockData: DataSourceItem[] = [\n    // customRender\n    {\n        formItemLabel: <b>自定义组件</b>,\n        type: 'customRender',\n        value: null,\n        name: 'select',\n        // 组件属性\n        compProps: {\n            placeholder: '请选择',\n        },\n        selfProps: {\n            options: selectList,\n        },\n        customRender: () => <div>customRender</div>,\n    },\n    // input\n    {\n        formItemLabel: '文本/数字',\n        type: 'input',\n        value: null,\n        name: 'text', // name会作为筛选参数的key，button类则没有key\n        // 组件属性\n        compProps: {\n            placeholder: '请输入',\n            type: 'text',\n        },\n        selfProps: {\n            // type: 'number',\n        },\n        rules: [\n            {\n                type: 'number',\n                required: true,\n                message: '请填写数字',\n                trigger: 'change',\n            },\n            {\n                validator: async (\n                    rule: Record<string, any>,\n                    value = ''\n                ): Promise<any> => {\n                    if (value.length < 3) {\n                        return Promise.reject(new Error('长度不可以小于3'))\n                    }\n                    return Promise.resolve()\n                },\n                trigger: 'change',\n            },\n        ],\n    },\n    // select\n    {\n        formItemLabel: '下拉选择',\n        type: 'select',\n        value: null,\n        name: 'select',\n        selfProps: {\n            options: selectList,\n        },\n        // 组件属性\n        compProps: {\n            placeholder: '请选择',\n        },\n    },\n    // cascader\n    {\n        formItemLabel: '多级菜单',\n        type: 'cascader',\n        value: [],\n        selfProps: {\n            options: cascaderList,\n            fieldNames: {\n                label: 'name',\n                value: 'cid',\n                children: 'children',\n            },\n        },\n        name: 'cascader',\n        // 组件属性\n        compProps: {\n            placeholder: '请选择',\n        },\n    },\n    // rangePicker\n    {\n        formItemLabel: '日期区间',\n        type: 'rangePicker',\n        value: ['2021-4-4 00:00:00', '2021-4-5 23:59:59'],\n        // value: [],\n        name: 'rangePicker',\n        // 组件属性\n        compProps: {\n            placeholder: ['开始时间', '结束时间'],\n        },\n    },\n    // range 范围值\n    {\n        formItemLabel: '文本区间',\n        type: 'rangeInput',\n        value: [1, 100],\n        name: 'rangeInput',\n        // 组件属性\n        compProps: [\n            {\n                placeholder: '请输入供货价',\n            },\n            {\n                placeholder: '请输入供货价',\n            },\n        ],\n        selfProps: {\n            type: 'number',\n        },\n    },\n    // button\n    {\n        formItemLabel: '  ',\n        type: 'btnGroup',\n        selfProps: {\n            options: btnConfig,\n        },\n        formItemProps: {\n            colon: false,\n            labelCol: {\n                span: 10,\n            },\n        },\n    },\n    // radio\n    {\n        formItemLabel: '单选',\n        type: 'radio',\n        value: 1,\n        name: 'radio',\n        eventName: 'radio',\n        // 组件属性\n        compProps: {\n            buttonStyle: 'solid',\n        },\n        selfProps: {\n            options: selectList,\n            // radio | button\n            type: 'radio',\n        },\n    },\n    // checkbox\n    {\n        formItemLabel: '多选',\n        type: 'checkbox',\n        value: [],\n        name: 'checkbox',\n        eventName: 'checkbox',\n        // 组件属性\n        selfProps: {\n            options: radioConfig,\n        },\n    },\n    // switch\n    {\n        formItemLabel: '开关',\n        type: 'switch',\n        value: false,\n        name: 'switch',\n        eventName: 'switch',\n        // 组件属性\n        compProps: {\n            checkedChildren: '选中',\n            unCheckedChildren: '未选中',\n        },\n        isHidden: false,\n    },\n]\n","import { DataSourceItem } from '../interface'\nimport { selectList } from './allDemo'\n\nexport const fetch = () => {\n    const result = [\n        {\n            label: '异步数据1',\n            value: '1',\n        },\n    ]\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            console.log('fetch')\n            resolve(result)\n        }, 2000)\n    })\n}\n\nexport const formDateSource: DataSourceItem[] = [\n    {\n        formItemLabel: '下拉1',\n        type: 'select',\n        value: '1',\n        name: 'select1',\n        selfProps: {\n            options: selectList,\n            // fieldNames: {\n            //     label: 'label',\n            //     value: 'value',\n            // },\n        },\n        // 组件属性\n        compProps: {\n            placeholder: '请选择',\n        },\n        formItemProps: {\n            required: true,\n        },\n    },\n    {\n        formItemLabel: '下拉2。下拉1更新时，重新发起请求',\n        type: 'select',\n        value: null,\n        name: 'select2',\n        selfProps: {\n            options: async () => {\n                const result = (await fetch()) as unknown[]\n                return result\n            },\n            deps: {\n                options: ['select1'],\n            },\n        },\n        // 组件属性\n        compProps: {\n            placeholder: '请选择',\n        },\n        formItemProps: {\n            required: true,\n        },\n    },\n]\n","import { configure } from '@storybook/vue3';\n    /* // preview entry\nimport '/home/runner/work/vue3-el/vue3-el/node_modules/@storybook/core-client/dist/esm/globals/polyfills.js';\n// preview entry\nimport '/home/runner/work/vue3-el/vue3-el/node_modules/@storybook/core-client/dist/esm/globals/globals.js'; */\n\n    import { addDecorator, addParameters, addLoader, addArgTypesEnhancer, addArgsEnhancer } from '@storybook/client-api';\n    import { logger } from '@storybook/client-logger';\n    import * as config_0 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-docs/dist/esm/frameworks/common/config.js'\nimport * as config_1 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-docs/dist/esm/frameworks/vue3/config.js'\nimport * as config_2 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-links/dist/esm/preset/addDecorator.js'\nimport * as config_3 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-actions/dist/esm/preset/addDecorator.js'\nimport * as config_4 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-actions/dist/esm/preset/addArgs.js'\nimport * as config_5 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-backgrounds/dist/esm/preset/addDecorator.js'\nimport * as config_6 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-backgrounds/dist/esm/preset/addParameter.js'\nimport * as config_7 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/@storybook/addon-measure/dist/esm/preset/preview.js'\nimport * as config_8 from '/@fs//home/runner/work/vue3-el/vue3-el/node_modules/storybook-addon-outline/dist/esm/preset/addDecorator.js'\nimport * as config_9 from '/@fs//home/runner/work/vue3-el/vue3-el/.storybook/preview.ts'\n    import * as story_0 from '/@fs//home/runner/work/vue3-el/vue3-el/stories/Introduction.stories.mdx'\nimport * as story_1 from '/@fs//home/runner/work/vue3-el/vue3-el/components/Button/index.stories.tsx'\nimport * as story_2 from '/@fs//home/runner/work/vue3-el/vue3-el/components/WidgetForm/index.stories.tsx'\n      \n    const configs = [config_0,config_1,config_2,config_3,config_4,config_5,config_6,config_7,config_8,config_9]\n    configs.forEach(config => {\n      Object.keys(config).forEach((key) => {\n        const value = config[key];\n        switch (key) {\n          case 'args':\n          case 'argTypes': {\n            return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n          }\n          case 'decorators': {\n            return value.forEach((decorator) => addDecorator(decorator, false));\n          }\n          case 'loaders': {\n            return value.forEach((loader) => addLoader(loader, false));\n          }\n          case 'parameters': {\n            return addParameters({ ...value }, false);\n          }\n          case 'argTypesEnhancers': {\n            return value.forEach((enhancer) => addArgTypesEnhancer(enhancer));\n          }\n          case 'argsEnhancers': {\n            return value.forEach((enhancer) => addArgsEnhancer(enhancer))\n          }\n          case 'globals':\n          case 'globalTypes': {\n            const v = {};\n            v[key] = value;\n            return addParameters(v, false);\n          }\n          default: {\n            // eslint-disable-next-line prefer-template\n            return console.log(key + ' was not supported :( !');\n          }\n        }\n      });\n    })\n    \n    /* TODO: not quite sure what to do with this, to fix HMR\n    if (import.meta.hot) {\n        import.meta.hot.accept();    \n    }\n    */\n    \n    configure(() => [story_0,story_1,story_2].filter(el => el.default), { hot: import.meta.hot }, false); // not sure if the import.meta.hot thing is correct"],"names":["antdBtnType","btnType","antdBtnProps","buttonProps","defineComponent","name","props","type","String","default","setup","slots","btnTypeCls","options","Array","Function","deps","fieldNames","Object","value","label","modelRef","reactive","updateOptions","optionsList","isArray","length","formatOptions","watch","curDeps","curOpt","preDeps","preOpt","isEqual","console","log","onBeforeMount","WidgetForm","dataSource","required","config","watchInitModel","updateState","emitInitModel","onInitModel","onChange","emits","emit","expose","stateRef","rulesRef","classRef","createClasses","rootCls","marginBottom","minWidth","width","textAlign","display","marginRight","formRef","ref","getRawModel","rawModel","rawRules","forEach","item","rules","isHidden","timeConfig","momentDate","dateString","second","msec","daySecond","dateVal","date","Date","getTime","sec","Math","floor","daySec","moment","startOf","format","push","FORMAT_DATE","datetime","initModelRef","keys","key","validate","payload","validateFields","clearValidate","formItem","eventName","compProps","selfProps","customRender","CustomRender","getDeps","rawDepVal","depOpt","depKey","customEmit","toRaw","onRangePickerChange","modelName","dateStr","momentDateObj","idx","str","ms","s","onCustomChange","val","optionList","rawData","filter","checked","includes","e","get","map","btnCompProps","btnEvtName","len","secCate","arr","getCateFullPath","defaultValue","time","minProps","maxProps","initData","curDataSource","preDataSource","onMounted","formItemLabel","extraRender","formItemProps","tips","selectList","cascaderList","level","children","btnConfig","danger","radioConfig","mockData","placeholder","message","trigger","validator","rule","Promise","reject","Error","resolve","colon","labelCol","span","buttonStyle","checkedChildren","unCheckedChildren","fetch","result","setTimeout","formDateSource"],"mappings":"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"}